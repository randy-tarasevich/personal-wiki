---
// RelatedNotes.astro - Server Island for related notes
import ServerIsland from './ServerIsland.astro';

const { noteId, title, content } = Astro.props;

const initialState = {
  noteId,
  title,
  content,
  relatedNotes: [],
  loading: false,
  error: null
};
---

<ServerIsland id="related-notes" component="RelatedNotes" props={initialState} serverAction="findRelated">
  <div class="bg-gradient-to-br from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20 rounded-xl p-6 border border-purple-200 dark:border-purple-800">
    <div class="flex items-center justify-between mb-4">
      <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-200 flex items-center">
        <svg class="w-5 h-5 mr-2 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
        </svg>
        Related Notes
      </h3>
      <button 
        id="find-related-btn"
        class="px-3 py-1 bg-purple-500 hover:bg-purple-600 text-white text-sm font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
      >
        <span class="flex items-center">
          <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
          </svg>
          Find Related
        </span>
      </button>
    </div>

    <!-- Loading State -->
    <div id="related-loading" class="hidden text-center py-8">
      <div class="inline-flex items-center text-purple-600 dark:text-purple-400">
        <svg class="w-5 h-5 mr-2 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
        </svg>
        Analyzing content for related notes...
      </div>
    </div>

    <!-- Error State -->
    <div id="related-error" class="hidden bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4">
      <div class="flex items-center">
        <svg class="w-5 h-5 text-red-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        <span class="text-red-800 dark:text-red-200 text-sm" id="error-message"></span>
      </div>
    </div>

    <!-- Related Notes List -->
    <div id="related-notes-list" class="space-y-3">
      <div class="text-center py-8 text-gray-500 dark:text-gray-400">
        <svg class="w-12 h-12 mx-auto mb-3 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
        </svg>
        <p class="text-sm">Click "Find Related" to discover similar notes using AI</p>
      </div>
    </div>
  </div>
</ServerIsland>

<script define:vars={{ noteId, title, content }}>
  // Related Notes Server Island functionality
  class RelatedNotesIsland {
    constructor(element) {
      this.element = element;
      this.islandId = element.dataset.islandId;
      this.noteId = noteId;
      this.title = title;
      this.content = content;
      
      this.findBtn = element.querySelector('#find-related-btn');
      this.loadingDiv = element.querySelector('#related-loading');
      this.errorDiv = element.querySelector('#related-error');
      this.notesList = element.querySelector('#related-notes-list');
      this.errorMessage = element.querySelector('#error-message');
      
      this.init();
    }

    init() {
      if (this.findBtn) {
        this.findBtn.addEventListener('click', () => this.findRelatedNotes());
      }
    }

    async findRelatedNotes() {
      this.setLoading(true);
      this.setError(null);

      try {
        const response = await fetch('/api/related-notes', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            noteId: this.noteId,
            title: this.title,
            content: this.content
          })
        });

        if (response.ok) {
          const data = await response.json();
          this.displayRelatedNotes(data.relatedNotes);
        } else {
          const error = await response.json();
          this.setError(error.error || 'Failed to find related notes');
        }
      } catch (error) {
        console.error('Related notes error:', error);
        this.setError('Failed to find related notes. Make sure Ollama is running.');
      } finally {
        this.setLoading(false);
      }
    }

    setLoading(loading) {
      if (this.loadingDiv) {
        this.loadingDiv.classList.toggle('hidden', !loading);
      }
      if (this.findBtn) {
        this.findBtn.disabled = loading;
        if (loading) {
          this.findBtn.innerHTML = `
            <span class="flex items-center">
              <svg class="w-4 h-4 mr-1 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
              </svg>
              Finding...
            </span>
          `;
        } else {
          this.findBtn.innerHTML = `
            <span class="flex items-center">
              <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
              </svg>
              Find Related
            </span>
          `;
        }
      }
    }

    setError(message) {
      if (this.errorDiv && this.errorMessage) {
        this.errorMessage.textContent = message;
        this.errorDiv.classList.toggle('hidden', !message);
      }
    }

    displayRelatedNotes(notes) {
      if (!this.notesList) return;

      if (notes.length === 0) {
        this.notesList.innerHTML = `
          <div class="text-center py-8 text-gray-500 dark:text-gray-400">
            <svg class="w-12 h-12 mx-auto mb-3 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            <p class="text-sm">No related notes found</p>
          </div>
        `;
        return;
      }

      this.notesList.innerHTML = notes.map(note => `
        <div class="bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700 hover:shadow-md transition-shadow">
          <a href="/note/${note.slug}" class="block">
            <h4 class="font-medium text-gray-900 dark:text-white mb-2 line-clamp-2">
              ${note.title}
            </h4>
            <p class="text-sm text-gray-600 dark:text-gray-400 mb-3 line-clamp-2">
              ${note.content.substring(0, 120)}...
            </p>
            ${note.tags ? `
              <div class="flex flex-wrap gap-1 mb-2">
                ${note.tags.split(',').slice(0, 3).map(tag => `
                  <span class="inline-flex items-center px-2 py-1 bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200 text-xs rounded">
                    ${tag.trim()}
                  </span>
                `).join('')}
                ${note.tags.split(',').length > 3 ? `
                  <span class="text-xs text-gray-500 dark:text-gray-400">
                    +${note.tags.split(',').length - 3} more
                  </span>
                ` : ''}
              </div>
            ` : ''}
            <div class="flex items-center justify-between text-xs text-gray-500 dark:text-gray-400">
              <span>
                ${new Date(note.updated_at).toLocaleDateString('en-US', {
                  month: 'short',
                  day: 'numeric',
                  year: 'numeric'
                })}
              </span>
              <span class="flex items-center text-purple-600 dark:text-purple-400">
                <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
                View
              </span>
            </div>
          </a>
        </div>
      `).join('');
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    const islandElement = document.querySelector('[data-island-id="island-related-notes"]');
    if (islandElement) {
      new RelatedNotesIsland(islandElement);
    }
  });
</script>
