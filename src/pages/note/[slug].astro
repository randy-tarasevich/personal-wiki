---
// note/[slug].astro - View a specific note
import DarkModeToggle from '../../components/DarkModeToggle.astro';
import RelatedNotes from '../../components/RelatedNotes.astro';
import db from '../../lib/db.js';
import '../../styles/global.css';

const { slug } = Astro.params;

// Fetch the note from database with tags
let note = null;
let noteTags = [];
try {
  note = db.prepare('SELECT * FROM notes WHERE slug = ?').get(slug);
  if (note) {
    noteTags = db.prepare(`
      SELECT t.name 
      FROM tags t 
      JOIN note_tags nt ON t.id = nt.tag_id 
      WHERE nt.note_id = ?
      ORDER BY t.name
    `).all(note.id);
  }
} catch (error) {
  console.error('Error fetching note:', error);
}

// If note doesn't exist, redirect to 404
if (!note) {
  return Astro.redirect('/404');
}

// Format dates
const createdDate = new Date(note.created_at).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
  hour: '2-digit',
  minute: '2-digit'
});

const updatedDate = new Date(note.updated_at).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
  hour: '2-digit',
  minute: '2-digit'
});
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{note.title} - Personal Wiki</title>
  </head>
  <body class="bg-gradient-to-br from-slate-50 to-blue-50 dark:from-gray-900 dark:to-gray-800 min-h-screen transition-colors duration-300">
    <!-- Dark mode toggle -->
    <div class="fixed top-4 right-4 z-50">
      <DarkModeToggle />
    </div>
    
    <main class="container mx-auto px-4 py-8 max-w-4xl">
      <!-- Navigation -->
      <nav class="mb-8">
        <div class="flex justify-between items-center">
					<div class="flex items-center">
						<a href="/" class="text-lg font-semibold text-gray-900 dark:text-white">
							Personal Wiki
						</a>
					</div>
					<div class="flex items-center">
						<!-- Search Bar -->
						<div class="relative">
							<form action="/search" method="GET" class="flex items-center">
								<div class="relative">
									<input
										type="text"
										name="q"
										placeholder="Search notes..."
										class="w-64 px-4 py-2 pl-10 pr-4 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-colors"
									/>
									<svg class="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
									</svg>
								</div>
								<button
									type="submit"
									class="ml-2 px-3 py-2 bg-purple-500 hover:bg-purple-600 text-white font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
								>
									<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
									</svg>
								</button>
							</form>
						</div>
					</div>
        </div>
      </nav>

      <!-- Note Header -->
      <div class="mb-8">
        <div class="flex items-center mb-4">
          <a href="/" class="inline-flex items-center text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            Back to Home
          </a>
        </div>
        
        <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-xl border border-gray-100 dark:border-gray-700 overflow-hidden transition-colors duration-300">
          <div class="p-8">
            <div class="flex justify-between items-start mb-6">
              <div class="flex-1">
                <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-4">
                  {note.title}
                </h1>
                <div class="flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400 mb-4">
                  <span class="flex items-center">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    Created {createdDate}
                  </span>
                  {updatedDate !== createdDate && (
                    <span class="flex items-center">
                      <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                      </svg>
                      Updated {updatedDate}
                    </span>
                  )}
                </div>
                
                {noteTags.length > 0 && (
                  <div class="flex flex-wrap gap-2">
                    {noteTags.map((tag) => (
                      <span class="inline-flex items-center px-3 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-sm rounded-full">
                        <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                        </svg>
                        {tag.name}
                      </span>
                    ))}
                  </div>
                )}
              </div>
              
              <!-- Action Buttons -->
              <div class="flex space-x-3">
                <a 
                  href={`/note/${note.slug}/edit`}
                  class="inline-flex items-center px-4 py-2 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
                >
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                  </svg>
                  Edit
                </a>
                
                <button 
                  onclick="if(confirm('Are you sure you want to delete this note?')) { fetch('/api/notes', { method: 'DELETE', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ id: note.id }) }).then(() => window.location.href = '/'); }"
                  class="inline-flex items-center px-4 py-2 bg-red-500 hover:bg-red-600 text-white font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
                >
                  <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                  </svg>
                  Delete
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Note Content -->
      <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-xl border border-gray-100 dark:border-gray-700 overflow-hidden transition-colors duration-300">
        <div class="p-8">
          <div class="prose prose-lg dark:prose-invert max-w-none">
            <div class="whitespace-pre-wrap text-gray-800 dark:text-gray-200 leading-relaxed">
              {note.content}
            </div>
          </div>
        </div>
      </div>

      <!-- Related Notes -->
      <div class="mt-8">
        <RelatedNotes noteId={note.id} title={note.title} content={note.content} />
      </div>
    </main>

    <script define:vars={{ note }}>
      // Handle delete confirmation
      document.addEventListener('DOMContentLoaded', () => {
        const deleteBtn = document.querySelector('button[onclick*="delete"]');
        if (deleteBtn) {
          deleteBtn.addEventListener('click', async (e) => {
            e.preventDefault();
            if (confirm('Are you sure you want to delete this note?')) {
              try {
                const response = await fetch('/api/notes', {
                  method: 'DELETE',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ id: note.id })
                });
                
                if (response.ok) {
                  window.location.href = '/';
                } else {
                  alert('Failed to delete note');
                }
              } catch (error) {
                console.error('Delete error:', error);
                alert('Failed to delete note');
              }
            }
          });
        }
      });
    </script>
  </body>
</html>
