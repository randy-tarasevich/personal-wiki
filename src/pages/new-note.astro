---
// new-note.astro - Create a new note page
import DarkModeToggle from '../components/DarkModeToggle.astro';
import VoiceInput from '../components/VoiceInput.astro';
import '../styles/global.css';

// Handle form submission
if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  const title = formData.get('title');
  const content = formData.get('content');
  const tags = formData.get('tags');
  
  if (title && content) {
    try {
      // Call the notes API
      const response = await fetch(`${Astro.url.origin}/api/notes`, {
        method: 'POST',
        body: formData
      });
      
      if (response.ok) {
        const result = await response.json();
        return Astro.redirect(`/?success=note-created&slug=${result.note.slug}`);
      } else {
        const error = await response.json();
        return Astro.redirect(`/new-note?error=${encodeURIComponent(error.error)}`);
      }
    } catch (error) {
      console.error('Error saving note:', error);
      return Astro.redirect('/new-note?error=Failed to save note');
    }
  }
}

// Get error message from URL params
const url = new URL(Astro.request.url);
const error = url.searchParams.get('error');
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>New Note - MyNotes</title>
  </head>
  <body class="bg-gradient-to-br from-slate-50 via-white to-blue-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-700 min-h-screen transition-colors duration-300">
    <main class="container mx-auto px-4 py-8 max-w-7xl">
      <!-- Navigation -->
      <nav class="mb-12">
        <div class="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-2xl shadow-lg dark:shadow-gray-900/20 border border-white/20 dark:border-gray-700/50 p-6">
          <div class="flex flex-col lg:flex-row lg:justify-between lg:items-center gap-6">
            <!-- Left: App Title and Dark Mode (Mobile) -->
            <div class="flex items-center justify-between lg:justify-start">
              <a href="/" class="text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 dark:from-blue-400 dark:to-purple-400 bg-clip-text text-transparent hover:from-blue-700 hover:to-purple-700 dark:hover:from-blue-300 dark:hover:to-purple-300 transition-all duration-300">
                MyNotes
              </a>
            <!-- Dark Mode Toggle - Mobile only -->
            <div class="flex lg:hidden">
              <DarkModeToggle />
            </div>
          </div>
          
          <!-- Center: New Note Button (Desktop only) -->
          <div class="hidden lg:flex items-center">
            <a href="/new-note" class="inline-flex items-center px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white font-medium rounded-lg transition-colors">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
              </svg>
              New Note
            </a>
          </div>
          
          <!-- Right: Search Bar and Dark Mode -->
          <div class="flex flex-col sm:flex-row items-stretch sm:items-center gap-3 lg:justify-end">
            
            <!-- Search Bar -->
            <div class="relative flex-1 sm:flex-initial">
              <form action="/search" method="GET" class="flex items-center">
                <div class="relative w-full sm:w-64">
                  <input
                    type="text"
                    name="q"
                    placeholder="Search notes..."
                    class="w-full px-4 py-2 pl-10 pr-4 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-colors"
                  />
                  <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                  </svg>
                </div>
                <button
                  type="submit"
                  class="ml-2 px-3 py-2 bg-purple-500 hover:bg-purple-600 text-white font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                  </svg>
                </button>
              </form>
            </div>
            
            <!-- Dark Mode Toggle - Desktop only -->
            <div class="hidden lg:flex items-center">
              <DarkModeToggle />
            </div>
            
            <!-- Mobile: New Note Button -->
            <div class="flex lg:hidden">
              <a href="/new-note" class="w-full inline-flex items-center justify-center px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white font-medium rounded-lg transition-colors">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
                New Note
              </a>
            </div>
          </div>
        </div>
      </nav>
      
      <!-- Header -->
      <div class="mb-12 text-center">
        <h1 class="text-5xl font-bold text-gray-900 dark:text-white mb-4 bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-transparent">
          Create New Note
        </h1>
        <p class="text-xl text-gray-600 dark:text-gray-300 font-light">
          Capture your thoughts and ideas
        </p>
      </div>

      <!-- Note Form -->
      <div class="bg-white/70 dark:bg-gray-800/70 backdrop-blur-sm rounded-3xl shadow-2xl border border-white/20 dark:border-gray-700/50 overflow-hidden transition-all duration-300 hover:shadow-3xl hover:scale-[1.01]">
        {error && (
          <div class="bg-red-50 dark:bg-red-900/20 border-l-4 border-red-500 p-4 m-6 rounded">
            <div class="flex">
              <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                </svg>
              </div>
              <div class="ml-3">
                <p class="text-sm text-red-800 dark:text-red-200">
                  {error}
                </p>
              </div>
            </div>
          </div>
        )}
        
        <form method="POST" class="p-8">
          <div class="space-y-8">
            <!-- Title Field -->
            <div>
              <label for="title" class="block text-lg font-semibold text-gray-700 dark:text-gray-300 mb-3">
                Note Title
              </label>
              <input
                type="text"
                id="title"
                name="title"
                placeholder="Enter a descriptive title..."
                class="w-full px-6 py-4 border border-gray-200/50 dark:border-gray-600/50 rounded-2xl bg-white/70 dark:bg-gray-700/70 backdrop-blur-sm text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50 transition-all duration-300 shadow-sm hover:shadow-md text-lg"
                required
              />
            </div>

                   <!-- Content Field -->
                   <div>
                     <label for="content" class="block text-lg font-semibold text-gray-700 dark:text-gray-300 mb-3">
                       Note Content
                     </label>
                     
                     <!-- Voice Input Component -->
                     <div class="mb-3">
                       <VoiceInput targetId="content" />
                     </div>
                     
                     <textarea
                       id="content"
                       name="content"
                       rows="12"
                       placeholder="Write your note content here... You can use markdown formatting."
                       class="w-full px-6 py-4 border border-gray-200/50 dark:border-gray-600/50 rounded-2xl bg-white/70 dark:bg-gray-700/70 backdrop-blur-sm text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50 transition-all duration-300 shadow-sm hover:shadow-md resize-none text-lg leading-relaxed"
                       required
                     ></textarea>
                   </div>

            <!-- Tags Field -->
            <div>
              <label for="tags" class="block text-lg font-semibold text-gray-700 dark:text-gray-300 mb-3">
                Tags
                <span class="text-gray-500 dark:text-gray-400 text-sm ml-2 font-normal">(comma-separated)</span>
              </label>
              <div class="flex gap-3">
                <input
                  type="text"
                  id="tags"
                  name="tags"
                  placeholder="Enter tags separated by commas..."
                  class="flex-1 px-6 py-4 border border-gray-200/50 dark:border-gray-600/50 rounded-2xl bg-white/70 dark:bg-gray-700/70 backdrop-blur-sm text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50 transition-all duration-300 shadow-sm hover:shadow-md text-lg"
                />
                <button
                  type="button"
                  id="suggest-tags-btn"
                  class="px-6 py-4 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white font-semibold rounded-xl shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-blue-500/50 whitespace-nowrap"
                >
                  <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
                  </svg>
                  AI Suggest
                </button>
              </div>
              <div id="suggested-tags" class="mt-2 hidden">
                <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">Suggested tags:</p>
                <div id="tag-suggestions" class="flex flex-wrap gap-2"></div>
              </div>
            </div>

            <!-- Action Buttons -->
            <div class="flex flex-col sm:flex-row gap-6 pt-8">
              <button
                type="submit"
                class="flex-1 bg-gradient-to-r from-blue-500 to-cyan-500 hover:from-blue-600 hover:to-cyan-600 text-white font-semibold py-4 px-8 rounded-xl shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-blue-500/50"
              >
                <span class="flex items-center justify-center">
                  <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                  Save Note
                </span>
              </button>
              
              <a
                href="/"
                class="flex-1 bg-gradient-to-r from-gray-400 to-gray-500 hover:from-gray-500 hover:to-gray-600 text-white font-semibold py-4 px-8 rounded-xl shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-gray-500/50 text-center"
              >
                <span class="flex items-center justify-center">
                  <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                  Cancel
                </span>
              </a>
            </div>
          </div>
        </form>
      </div>

      <!-- Help Section -->
      <div class="mt-8 bg-blue-50 dark:bg-blue-900/20 rounded-lg p-6">
        <h3 class="text-lg font-semibold text-blue-900 dark:text-blue-100 mb-3">
          <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          Tips for Great Notes
        </h3>
        <ul class="text-blue-800 dark:text-blue-200 space-y-2 text-sm">
          <li class="flex items-start">
            <span class="w-2 h-2 bg-blue-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
            Use descriptive titles that help you find the note later
          </li>
          <li class="flex items-start">
            <span class="w-2 h-2 bg-blue-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
            You can use markdown formatting for rich text (bold, italic, lists, etc.)
          </li>
          <li class="flex items-start">
            <span class="w-2 h-2 bg-blue-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
            Use the AI Suggest button to automatically generate relevant tags
          </li>
        </ul>
      </div>
    </main>

    <script>
      // Tag suggestion functionality
      document.addEventListener('DOMContentLoaded', () => {
        const suggestBtn = document.getElementById('suggest-tags-btn');
        const tagsInput = document.getElementById('tags');
        const suggestedTagsDiv = document.getElementById('suggested-tags');
        const tagSuggestionsDiv = document.getElementById('tag-suggestions');
        const titleInput = document.getElementById('title');
        const contentInput = document.getElementById('content');

        if (suggestBtn) {
          suggestBtn.addEventListener('click', async () => {
            const title = titleInput ? titleInput.value.trim() : '';
            const content = contentInput ? contentInput.value.trim() : '';

            if (!title || !content) {
              alert('Please enter both title and content before suggesting tags.');
              return;
            }

            // Show loading state
            suggestBtn.disabled = true;
            suggestBtn.innerHTML = `
              <svg class="w-4 h-4 mr-2 inline animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
              </svg>
              Analyzing...
            `;

            try {
              const response = await fetch('/api/suggest-tags', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ title, content })
              });

              if (response.ok) {
                const data = await response.json();
                displaySuggestedTags(data.tags);
              } else {
                const error = await response.json();
                alert(`Error: ${error.error}`);
              }
            } catch (error) {
              console.error('Tag suggestion error:', error);
              alert('Failed to get tag suggestions. Make sure Ollama is running.');
            } finally {
              // Reset button
              suggestBtn.disabled = false;
              suggestBtn.innerHTML = `
                <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
                </svg>
                AI Suggest
              `;
            }
          });
        }

        function displaySuggestedTags(tags) {
          if (!tagSuggestionsDiv) return;
          
          tagSuggestionsDiv.innerHTML = '';
          
          tags.forEach(tag => {
            const tagElement = document.createElement('span');
            tagElement.className = 'inline-flex items-center px-3 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-sm rounded-full cursor-pointer hover:bg-blue-200 dark:hover:bg-blue-800 transition-colors';
            tagElement.textContent = tag;
            tagElement.addEventListener('click', () => {
              addTagToInput(tag);
            });
            tagSuggestionsDiv.appendChild(tagElement);
          });

          if (suggestedTagsDiv) {
            suggestedTagsDiv.classList.remove('hidden');
          }
        }

        function addTagToInput(tag) {
          if (!tagsInput) return;
          
          const currentTags = tagsInput.value.trim();
          if (currentTags) {
            tagsInput.value = currentTags + ', ' + tag;
          } else {
            tagsInput.value = tag;
          }
          tagsInput.focus();
        }
      });
    </script>
  </body>
</html>
