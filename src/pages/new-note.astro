---
// new-note.astro - Create a new note page
import DarkModeToggle from '../components/DarkModeToggle.astro';
import VoiceInput from '../components/VoiceInput.astro';
import '../styles/global.css';

// Handle form submission
if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  const title = formData.get('title');
  const content = formData.get('content');
  const tags = formData.get('tags');
  
  if (title && content) {
    try {
      // Call the notes API
      const response = await fetch(`${Astro.url.origin}/api/notes`, {
        method: 'POST',
        body: formData
      });
      
      if (response.ok) {
        const result = await response.json();
        return Astro.redirect(`/?success=note-created&slug=${result.note.slug}`);
      } else {
        const error = await response.json();
        return Astro.redirect(`/new-note?error=${encodeURIComponent(error.error)}`);
      }
    } catch (error) {
      console.error('Error saving note:', error);
      return Astro.redirect('/new-note?error=Failed to save note');
    }
  }
}

// Get error message from URL params
const url = new URL(Astro.request.url);
const error = url.searchParams.get('error');
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>New Note - Personal Wiki</title>
  </head>
  <body class="bg-gradient-to-br from-slate-50 to-blue-50 dark:from-gray-900 dark:to-gray-800 min-h-screen transition-colors duration-300">
    <!-- Dark mode toggle -->
    <div class="fixed top-4 right-4 z-50">
      <DarkModeToggle />
    </div>
    
    <main class="container mx-auto px-4 py-8 max-w-4xl">
      <!-- Header -->
      <div class="mb-8">
        <div class="flex items-center mb-6">
          <a href="/" class="inline-flex items-center text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            Back to Home
          </a>
        </div>
        
        <div class="text-center">
          <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-4">
            Create New Note
          </h1>
          <p class="text-lg text-gray-600 dark:text-gray-300">
            Capture your thoughts and ideas
          </p>
        </div>
      </div>

      <!-- Note Form -->
      <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-xl border border-gray-100 dark:border-gray-700 overflow-hidden transition-colors duration-300">
        {error && (
          <div class="bg-red-50 dark:bg-red-900/20 border-l-4 border-red-500 p-4 m-6 rounded">
            <div class="flex">
              <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                </svg>
              </div>
              <div class="ml-3">
                <p class="text-sm text-red-800 dark:text-red-200">
                  {error}
                </p>
              </div>
            </div>
          </div>
        )}
        
        <form method="POST" class="p-8">
          <div class="space-y-6">
            <!-- Title Field -->
            <div>
              <label for="title" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Note Title
              </label>
              <input
                type="text"
                id="title"
                name="title"
                placeholder="Enter a descriptive title..."
                class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors"
                required
              />
            </div>

                   <!-- Content Field -->
                   <div>
                     <div class="flex items-center justify-between mb-2">
                       <label for="content" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                         Note Content
                       </label>
                       <!-- Voice Input Component - Moved to label area -->
                       <VoiceInput targetId="content" />
                     </div>
                     
                     <textarea
                       id="content"
                       name="content"
                       rows="12"
                       placeholder="Write your note content here... You can use markdown formatting."
                       class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors resize-none"
                       required
                     ></textarea>
                   </div>

            <!-- Tags Field -->
            <div>
              <label for="tags" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Tags
                <span class="text-gray-500 dark:text-gray-400 text-xs ml-2">(comma-separated)</span>
              </label>
              <div class="flex gap-2">
                <input
                  type="text"
                  id="tags"
                  name="tags"
                  placeholder="Enter tags separated by commas..."
                  class="flex-1 px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors"
                />
                <button
                  type="button"
                  id="suggest-tags-btn"
                  class="px-4 py-3 bg-green-500 hover:bg-green-600 text-white font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 whitespace-nowrap"
                >
                  <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
                  </svg>
                  AI Suggest
                </button>
              </div>
              <div id="suggested-tags" class="mt-2 hidden">
                <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">Suggested tags:</p>
                <div id="tag-suggestions" class="flex flex-wrap gap-2"></div>
              </div>
            </div>

            <!-- Action Buttons -->
            <div class="flex flex-col sm:flex-row gap-4 pt-6">
              <button
                type="submit"
                class="flex-1 bg-blue-500 hover:bg-blue-600 text-white font-medium py-3 px-6 rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800"
              >
                <span class="flex items-center justify-center">
                  <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                  Save Note
                </span>
              </button>
              
              <a
                href="/"
                class="flex-1 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 font-medium py-3 px-6 rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 text-center"
              >
                <span class="flex items-center justify-center">
                  <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                  Cancel
                </span>
              </a>
            </div>
          </div>
        </form>
      </div>

      <!-- Help Section -->
      <div class="mt-8 bg-blue-50 dark:bg-blue-900/20 rounded-lg p-6">
        <h3 class="text-lg font-semibold text-blue-900 dark:text-blue-100 mb-3">
          <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          Tips for Great Notes
        </h3>
        <ul class="text-blue-800 dark:text-blue-200 space-y-2 text-sm">
          <li class="flex items-start">
            <span class="w-2 h-2 bg-blue-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
            Use descriptive titles that help you find the note later
          </li>
          <li class="flex items-start">
            <span class="w-2 h-2 bg-blue-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
            You can use markdown formatting for rich text (bold, italic, lists, etc.)
          </li>
          <li class="flex items-start">
            <span class="w-2 h-2 bg-blue-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
            Use the AI Suggest button to automatically generate relevant tags
          </li>
        </ul>
      </div>
    </main>

    <script>
      // Tag suggestion functionality
      document.addEventListener('DOMContentLoaded', () => {
        const suggestBtn = document.getElementById('suggest-tags-btn');
        const tagsInput = document.getElementById('tags');
        const suggestedTagsDiv = document.getElementById('suggested-tags');
        const tagSuggestionsDiv = document.getElementById('tag-suggestions');
        const titleInput = document.getElementById('title');
        const contentInput = document.getElementById('content');

        if (suggestBtn) {
          suggestBtn.addEventListener('click', async () => {
            const title = titleInput ? titleInput.value.trim() : '';
            const content = contentInput ? contentInput.value.trim() : '';

            if (!title || !content) {
              alert('Please enter both title and content before suggesting tags.');
              return;
            }

            // Show loading state
            suggestBtn.disabled = true;
            suggestBtn.innerHTML = `
              <svg class="w-4 h-4 mr-2 inline animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
              </svg>
              Analyzing...
            `;

            try {
              const response = await fetch('/api/suggest-tags', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ title, content })
              });

              if (response.ok) {
                const data = await response.json();
                displaySuggestedTags(data.tags);
              } else {
                const error = await response.json();
                alert(`Error: ${error.error}`);
              }
            } catch (error) {
              console.error('Tag suggestion error:', error);
              alert('Failed to get tag suggestions. Make sure Ollama is running.');
            } finally {
              // Reset button
              suggestBtn.disabled = false;
              suggestBtn.innerHTML = `
                <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
                </svg>
                AI Suggest
              `;
            }
          });
        }

        function displaySuggestedTags(tags) {
          if (!tagSuggestionsDiv) return;
          
          tagSuggestionsDiv.innerHTML = '';
          
          tags.forEach(tag => {
            const tagElement = document.createElement('span');
            tagElement.className = 'inline-flex items-center px-3 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-sm rounded-full cursor-pointer hover:bg-blue-200 dark:hover:bg-blue-800 transition-colors';
            tagElement.textContent = tag;
            tagElement.addEventListener('click', () => {
              addTagToInput(tag);
            });
            tagSuggestionsDiv.appendChild(tagElement);
          });

          if (suggestedTagsDiv) {
            suggestedTagsDiv.classList.remove('hidden');
          }
        }

        function addTagToInput(tag) {
          if (!tagsInput) return;
          
          const currentTags = tagsInput.value.trim();
          if (currentTags) {
            tagsInput.value = currentTags + ', ' + tag;
          } else {
            tagsInput.value = tag;
          }
          tagsInput.focus();
        }
      });
    </script>
  </body>
</html>
